---
import type { Movie, Provider } from "@actions/movie";
import { getSharingDetails } from "src/utlils/shareDetails";
import FormattedDate from "./FormattedDate.astro";
import ShareButton from "./ShareButton.astro";

interface Props {
	movie: Movie | null | undefined;
}

const { movie } = Astro.props;

const share = getSharingDetails(movie);
---


{movie && (
<article class="movie-card show">
  <img class="movie-card-image" width="300" src={share.imageUrl} alt={movie.title} />
  <section class="movie-card-details">
    <section class="movie-card-details-meta">
      <FormattedDate date={new Date(movie.release_date)} />
      <span>{movie.runtime} minutes</span>
    </section>
    <h2>{movie.title}</h2>
    <section class="movie-card-details-meta">
      {movie.genres.map(
        (genre: { name: string; }) => (<span>{genre.name}</span>)
      )}
    </section>
  <section>
    <div style="display: flex; gap: .5rem;">
      {movie.providers !== undefined
        && movie.providers.map((provider: Provider) => (
        <a href={provider.url} style="display: flex;"><img
          width="36"
          height="36"
          src={`https://image.tmdb.org/t/p/w500${provider.logo_path}`}
          alt={provider.provider_name} title={provider.provider_name} />
        </a>
      ))}
    </div>
  </section>
  <p>{movie.tagline}</p>
  <p class="movie-overview">{movie.overview}</p>
  <section style="display: flex; gap: 1rem; align-self: flex-start; justify-content: space-between; width: 100%">
  {movie.imdb_id && (
    <a href={`https://imdb.com/title/${movie.imdb_id}`} style="display: flex; flex: 0 0 96px;">
      <img width="96px" src="/imdb.svg" alt={`IMDB link to ${movie.title}`} />
    </a>
  )}
  {share && (
    <ShareButton transition:persist style="flex: 0 0 80px; height: 48px; padding: .5rem 1rem;" url={share.url} />
  )}
  </section>
  </section>
</article>
<article class="movie-card movie-card-skeleton">
  <div class="movie-card-image skeleton" />
  <section class="movie-card-details">
    <section class="movie-card-details-meta">
      <span class="skeleton" style="width: 140px;" />
      <span class="skeleton" style="width: 100px;" />
    </section>
    <h2 class="movie-title">Finding Suggestions...</h2>
    <section class="movie-card-details-meta">
      <span class="skeleton" style="width: 120px;"></span>
      <span class="skeleton" style="width: 80px;"></span>
      <span class="skeleton" style="width: 100px;"></span>
    </section>
  <section>
    <div style="display: flex; gap: .5rem;">
      <div class="skeleton" style="width: 36px; height: 36px;" />
      <div class="skeleton" style="width: 36px; height: 36px;" />
    </div>
  </section>
  <p class="movie-overview">Asking the robot for a great movie based on your search request...</p>
  <p class="skeleton" style="width: 100%;"></p>
  <p class="skeleton" style="width: 80%;"></p>
  <p class="skeleton" style="width: 20%;"></p>
  <p class="skeleton" style="width: 50%;"></p>
  </section>
</article>
)}
<script>
  document.addEventListener('astro:page-load', () => {
    const movieCard = document.querySelector('.movie-card') as HTMLElement | null;
    const movieCardSkeleton = document.querySelector('.movie-card-skeleton') as HTMLElement | null;;

    document.addEventListener('movie-card--update', (event: Event) => {
      const customEvent = event as CustomEvent<{ showSkeleton: boolean, title: string, description: string }>;
      console.log('suggestion event', customEvent.detail);

      movieCardSkeleton!.querySelector('.movie-title')!.textContent = customEvent.detail.title;
      movieCardSkeleton!.querySelector('.movie-overview')!.textContent = customEvent.detail.description;

      if (customEvent.detail.showSkeleton) {
        movieCard?.classList.remove('show');
        movieCardSkeleton?.classList.add('show');
      } else {
        movieCard?.classList.add('show');
        movieCardSkeleton?.classList.remove('show');
      }
    });
  });
</script>
<style>
  .movie-card {
    min-width: 100%;
    display: none;
    gap: 1rem;
    flex-wrap: wrap;
    justify-content: center;
		background: black;
    border-radius: 1rem;
    color: white;
    padding: 1rem;
    box-sizing: border-box;
    margin: 0 0 2rem;
  }

  .movie-card.show {
    display: flex;
  }

  .movie-card-details-meta {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    font-size: .85rem;
    font-weight: 600;
    font-variant: small-caps;
    margin-bottom: 1rem;
    width: 100%;
  }

  .movie-card .movie-card-image {
    aspect-ratio: 2 / 3;
    flex: 1 3 160px;
    height: fit-content;
    width: 200px;
		border-radius: .5rem;
  }

  .movie-card .movie-card-details {
    flex:  3 2 300px;
  }

  .movie-card h2 {
    font-size: clamp(1rem, calc(1rem + 3vw), 2.7rem);
    margin: 0 0 1rem;
    line-height: 1;
  }

  .movie-card .movie-overview {
    flex-grow: 2;
  }

  .movie-card-skeleton {
    display: none;
  }

  .movie-card-skeleton.show {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    justify-content: center;
    background: black;
    border-radius: 1rem;
    color: white;
    padding: 1rem;
    box-sizing: border-box;
    margin: 0 0 2rem;
  }

  .skeleton {
    border-radius: 1rem;
    height: 1rem;
    width: 100%;
    clip-path: content-box;
  }

  .skeleton::before {
    content: ' ';
    display: block;
    height: 100%;
    width: 100%;
    background: radial-gradient(circle at 50% 50%, oklch(0.36 0.16 29.9), transparent), radial-gradient(circle at 30% 30%, oklch(0.36 0.16 29.9), gold), radial-gradient(circle at 70% 70%, black, black); */
    background-size: 150% 150%;
    background-repeat: no-repeat;
    background-size: 200% 200%;
    animation: skeleton-move 2s infinite alternate ease-in-out;
  }

  @keyframes skeleton-move {
    0% {
      background-position: left;
    }
    100% {
      background-position: right;
    }
  }
</style>
