---
import { getAllGenres, getAllMovieProviders } from "@data/tmdb";
import Layout from "src/layouts/Layout.astro";
import MovieCard from "./MovieCard.astro";
import type { Movie, MovieFormData, Provider } from "@actions/movie";
import Popover from "./Popover.astro";
import Button from "./Button.astro";
import BrowserStore from "./BrowserStore.astro";
import ScrollPositionRestore from "./ScrollPositionRestore.astro";
import { getSharingDetails } from "src/utlils/shareDetails";
import ResetButton from "./ResetButton.astro";
import PreviousSuggestions from "./PreviousSuggestions.astro";

interface Props {
	movie: Movie | null;
	formData: MovieFormData;
}

const { movie, formData } = Astro.props;

const movieGenres = await getAllGenres({ type: "movie" });
const decades = [1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020];
const providers = await getAllMovieProviders();

const share = getSharingDetails(movie);
---
<slot name="head">
  <meta property="og:title" content={share.title} />
  <meta property="og:description" content={share.title}>
  <meta property="og:type" content="website">
  <meta property="og:url" content={share.url} />
  <meta property="og:image" content={share.imageUrl} />
</slot>
<Layout title="Movie Surf">
  <BrowserStore>
  <form name="movie-search-details" method="POST" transition:persist>
    <Popover title="Filters" id="prompt-popover">
        <fieldset>
          <h2>Genre</h2>
          <ul class="genre-list">
            {movieGenres.map(
              (genre: { id: number; name: string; }) => (
              <li><label>
                <input name="genres" type="checkbox" value={genre.id} checked={formData.genres.includes(genre.id)} />
                {genre.name}
              </label></li>
            ))}
          </ul>
        </fieldset>
        <fieldset>
          <h2>Decade</h2>
          <select name="decade" id="decade">
            <option value="0">All</option>
            {decades.map(decade => (
              <option value={decade} selected={formData.decade === decade} data-decade={decade} data-value={formData.decade}>{decade}'s</option>
            ))}
          </select>
        </fieldset>
				<!-- <ul class="genre-list">
					<li>
            <Radio label="All" name="decade" value="0" checked={formData.decade === 0} />
					</li>
					{decades.map(decade => (
          <li>
            <Radio label={`${decade}'s`} name="decade" value={decade.toString()} checked={formData.decade === decade} />
          </li>))}
				</ul> -->
        <fieldset>
          <h2>Streaming Services</h2>
          <ul class="genre-list">
            {providers?.map(
              (provider: Provider) => (
              <li><label>
                <input name="providers" type="checkbox" value={provider.provider_id} checked={formData.providers?.includes(provider.provider_id)} />
                <img width="24" src={`https://image.tmdb.org/t/p/w500${provider.logo_path}`} alt={provider.provider_name} title={provider.provider_name} />
                {provider.provider_name}
              </label></li>
            ))}
          </ul>
        </fieldset>
        <div class="popover-footer-button">
          <Button style={{ 
            flex: '2 1 300px'
          }} type="submit" variant="primary" name="new-movie-button" glow>Next Movie</Button>
            <ResetButton />
        </div>
    </Popover>
    <div class="control-dock-container">
      <div class="control-dock">
        <textarea name="prompt" placeholder="Brad Pitt's worst performance" />
        <Button style={{ flex: '2 1 200px'}} type="submit" variant="primary" name="new-movie-button" glow autofocus>Next Movie</Button>
        <Button style={{ flex: '1 2 100px'}} dialogtarget="prompt-popover">Filters</Button>
        <!-- <Button dialogtarget="genre-popover">Genres</Button>
        <Button dialogtarget="decade-popover">Decade</Button>
        <Button dialogtarget="providers-popover">Services</Button> -->
      </div>
    </div>
  </form>
</BrowserStore>
<slot></slot>
<MovieCard movie={movie} />
<PreviousSuggestions movieId={movie?.id} />
<!-- TODO: Is this needed if we get the server island working? -->
<ScrollPositionRestore />
</Layout>
<script>
  import { actions } from 'astro:actions';
  import { navigate } from 'astro:transitions/client';
  import type { MovieFormData } from 'src/actions/movie';

  async function handleSubmit(event: Event) {
    event?.preventDefault();
    const submitButton = event?.currentTarget as HTMLButtonElement;


    document.dispatchEvent(new CustomEvent("movie-card--update", { detail: {
      showSkeleton: true,
      title: 'Finding Suggestions...',
      description: 'Asking the robot for a great movies based on your search request...'
    }}));
    const form = document.forms.namedItem("movie-search-details") as HTMLFormElement | null;
    const formData = new FormData(form!);
    let formValues: MovieFormData = {
      genres: [],
      good: true,
      prompt: "",
    };
    for (const key of formData.keys()) {
      const value = formData.getAll(key);
      switch(key) {
        case "genres":
        case "providers":
          formValues = { ...formValues, [key]: value.map(Number) };
          break;
        case "decade":
          formValues = { ...formValues, [key]: Number(value[0]) };
          break;
        case "good":
          formValues = { ...formValues, [key]: value[0] === "true" };
          break;
        default:
          if (value.length === 1) {
            formValues = { ...formValues, [key]: value[0] };
          } else {
            formValues = { ...formValues, [key]: value };
          }
      }
    }
    console.log('using ai...', formValues);

    try {

    const { data, error } = await actions.movie.suggestion(formValues);
    if (error) alert(error.message);

    if (!data?.hasResults) {
      return
    }

    console.log('Matches found, making sure they aren\'t hallucinations...', data);
    
    
    
    document.dispatchEvent(new CustomEvent("movie-card--update", { detail: {
      showSkeleton: true,
      title: 'Verifying Suggestions...',
      description: 'Determining which robot suggestions are real and not hallucinations...'
    }}));
    const { data: movies, error: err } = await actions.movie.find(data.movies);

    if (err) alert(err.message)

    if (!movies || movies?.length === 0) {
      return
    }

    console.log('Movie results verified, selecting movie...', movies);
    
    
    
    document.dispatchEvent(new CustomEvent("movie-card--update", { detail: {
      showSkeleton: true,
      title: 'Making Recommendation...',
      description: 'Plucking the best movie from the options...'
    }}));
    const {data: result, error: er } = await actions.movie.select(movies);

    if (er) alert(er.message)

    if (!result) {
      return
    }

    console.log('Movie selected, updating UI...', result);
    navigate('/movie/' + result.id);

    } finally {
      submitButton.disabled = false;
    }
  }

  const submitButtons = document.querySelectorAll("[name='new-movie-button']") as NodeListOf<HTMLButtonElement>;
  for (const button of submitButtons) {
    button.addEventListener("click", async (event) => {
      submitButtons.forEach((btn) => {
        btn.disabled = true;
      });
      const dialogs = document.querySelectorAll("dialog");
      dialogs.forEach((dialog) => {
        dialog.close();
      });
      try {
        await handleSubmit(event);
      } finally {
        submitButtons.forEach((btn) => {
          btn.disabled = false;
        });
      }
    });
  }
</script>
<style>
  .break:after {
    margin: 0 0 0 1rem;
    content: "|";
    display: inline-block;
  }

  .genre-list {
    list-style: none;
    padding: 0 1rem;
    margin: 0;
    display: flex;
    gap: .5rem;
    flex-wrap: wrap;
    accent-color: gold;

    li {
      flex: 0 1 280px;
    }

    label {
      cursor: pointer;
      display: inline-block;
      padding: .25rem 1rem .25rem .25rem;
      color: white;
      display: flex;
      align-items: center;
      gap: .5rem;
    }
  }

  form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .control-dock-container {
    position: fixed;
    bottom: 0;
    width: 100%;
    left: 0;
    z-index: 100;
  }

  .control-dock {
    display: flex;
    flex-wrap: wrap;
    gap: .5rem;
    width: 100%;
    max-width: 800px;
    margin: auto;
    background: black;
    border-radius: 1rem 1rem 0 0;
    padding: .5rem;
    box-sizing: border-box;
    box-shadow: 0 0 6px -2px gold;
  }

  fieldset {
    border: none;
    padding: 0 1rem;
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    flex-direction: column;
  }

  fieldset h2 {
    font-size: 1.5rem;
    font-family: "ltc-broadway-engraved", sans-serif;
    border-bottom: 1px solid white;
    width: 60%;
    margin: 2rem 0 1rem;
  }

  textarea {
    padding: .5rem 1rem;
    border-radius: .5rem;
    background-color: white;
    color: black;
    border: 2px solid black;
    font-size: 1rem;
    resize: none;
    width: 100%;
    height: .75rem;
    font-size: .75rem;
    transition: all .25s ease;
  }

  textarea:focus-visible {
    outline: gold solid 4px;
    outline-offset: 2px;
    font-size: 1rem;
    padding: 1rem 1.5rem;
  }

  textarea:focus {
    height: 25vh;
  }

  input[type="checkbox"] {
    appearance: none;
    margin: 0;
    width: 1.25rem;
    height: 1.25rem;
    background-color: white;
    border-radius: .25rem;
    display: grid;
    place-content: center;
    cursor: pointer;
  }

  input[type="checkbox"]:checked {
    background: url(/checkmark.svg);
    background-size: 1rem 1.25rem;
    background-repeat: no-repeat;
    background-position: center;
    background-color: gold;
    box-shadow: 0 0 6px -2px gold;
    animation: glow-checkmark 2s ease infinite alternate;
  }

  select {
    max-width: max-content;
    padding: .5rem 1rem;
    border-radius: .5rem;
    font-size: 1rem;
    font-weight: bold;
  }

  label:has(input[type="checkbox"]) {
    border-radius: 8px;
  }

  input[type="checkbox"]:focus-visible {
    outline: none;
  }

  label:has(input[type="checkbox"]:focus-visible) {
    outline: 2px solid gold;
    outline-offset: -2px;
    overflow-x: visible;
  }

  label:has(input[type="checkbox"]):hover {
    background-color: rgba(255, 255, 255, 0.1);
  }

  aside {
    font-size: .8rem;
    color: lightgray;
    font-style: italic;

    p {
      margin: 0;
    }
    ul {
      margin: .5rem 0 0;
    }
  }

  .popover-footer-button {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    position: sticky;
    bottom: 0;
    margin: 2rem 0 0;
    padding: 2rem 1rem;
    background: black;
  }
</style>
