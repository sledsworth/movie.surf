---
import { getAllGenres, getAllMovieProviders } from "@data/tmdb.new";
import Layout from "src/layouts/Layout.astro";
import MovieCard from "./MovieCard.astro";
import type { Movie, MovieFormData, Provider } from "@actions/movie";
import Popover from "./Popover.astro";
import Button from "./Button.astro";
import ShareButton from "./ShareButton.astro";
import BrowserStore from "./BrowserStore.astro";
import ScrollPositionRestore from "./ScrollPositionRestore.astro";
import Radio from "./Radio.astro";

interface Props {
	movie: Movie | null;
	formData: MovieFormData;
}

const { movie, formData } = Astro.props;

const seenMovies = (await Astro.session?.get("viewedMovies")) || [];
console.log("seen", seenMovies);

const movieGenres = await getAllGenres({ type: "movie" });
const decades = [1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020];
const providers = await getAllMovieProviders();

const shareTitle = movie
	? `üçø Movie night!\n\n Let's watch "${movie?.title}"`
	: "Movie Surf";
// const shareDescription = "üçø It's movie night!";
const shareUrl = movie
	? `https://movie.surf/movie/${movie?.id}`
	: "https://movie.surf";
const shareImageUrl = movie
	? `https://image.tmdb.org/t/p/w500${movie?.poster_path}`
	: "";
---
<slot name="head">
  <meta property="og:title" content={shareTitle} />
  <meta property="og:description" content={shareTitle}>
  <meta property="og:type" content="website">
  <meta property="og:url" content={shareUrl} />
  <meta property="og:image" content={shareImageUrl} />
</slot>
<Layout title="Movie Surf">
  <!-- <BrowserStore> -->
  <form name="movie-search-details" method="POST">
    <Popover title="Description" id="prompt-popover">
        <textarea rows="8" name="prompt" placeholder="Brad Pitt's worst performance" />
        <aside>
          <h2>Examples</h2>
          <ul>
            <li>George Clooney's worst performance (God help us if it isn't Batman & Robin).</li>
            <li>The best whodonit' (that's not Knives Out).</li>
            <li>The worst movie of all time.</li>
            <li>Some movie about doing taxes.</li>
            <li>A movie where Brad Pitt is always eating.</li>
            <li>Steven Spielberg's best flick.</li>
          </ul>
        </aside>
      </Popover>
    <Popover title="Genres" id="genre-popover">
        <ul class="genre-list">
          {movieGenres.map(
            (genre: { id: number; name: string; }) => (
            <li><label>
              <input name="genres" type="checkbox" value={genre.id} checked={formData.genres.includes(genre.id)} />
              {genre.name}
            </label></li>
          ))}
        </ul>
      </Popover>
    <Popover title="Decade" id="decade-popover">
				<ul class="genre-list">
					<li>
            <Radio label="All" name="decade" value="0" checked={formData.decade === 0} />
					</li>
					{decades.map(decade => (
          <li>
            <Radio label={`${decade}'s`} name="decade" value={decade.toString()} checked={formData.decade === decade} />
          </li>))}
				</ul>
    </Popover>
    <Popover title="Services" id="providers-popover">
        <ul class="genre-list">
          {providers?.map(
            (provider: Provider) => (
            <li><label>
              <input name="providers" type="checkbox" value={provider.provider_id} checked={formData.providers?.includes(provider.provider_id)} />
              <img width="24" src={`https://image.tmdb.org/t/p/w500${provider.logo_path}`} alt={provider.provider_name} title={provider.provider_name} />
              {provider.provider_name}
            </label></li>
          ))}
        </ul>
    </Popover>
    <MovieCard server:defer movie={movie} />
   	<div class="control-dock-container">
		<div class="control-dock">
			<ShareButton url={shareUrl} />
			<Button type="submit" variant="primary" id="new-movie-button" glow autofocus>New Movie</Button>
			<Button popovertarget="prompt-popover">Describe</Button>
			<Button popovertarget="genre-popover">Genres</Button>
			<Button popovertarget="decade-popover">Decade</Button>
			<Button popovertarget="providers-popover">Services</Button>
		</div>
	</div>
  </form>
<!-- </BrowserStore> -->
<!-- TODO: Is this needed if we get the server island working? -->
<!-- <ScrollPositionRestore /> -->
</Layout>
<Button glow id="test">Suggestion</Button>
<script>
  import { actions } from 'astro:actions';
  import type { MovieFormData } from 'src/actions/movie';
  const testButton = document.querySelector("#test") as HTMLButtonElement | null;
  testButton?.addEventListener("click", async () => {
    console.log("Suggestion button clicked");
    const form = document.forms.namedItem("movie-search-details") as HTMLFormElement | null;
    const formData = new FormData(form!);
    let formValues: MovieFormData = {
      genres: [],
      good: true,
      prompt: "",
    };
    for (const key of formData.keys()) {
      const value = formData.getAll(key);
      switch(key) {
        case "genres":
        case "providers":
          formValues = { ...formValues, [key]: value.map(Number) };
          break;
        case "decade":
          formValues = { ...formValues, [key]: Number(value[0]) };
          break;
        case "good":
          formValues = { ...formValues, [key]: value[0] === "true" };
          break;
        default:
          if (value.length === 1) {
            formValues = { ...formValues, [key]: value[0] };
          } else {
            formValues = { ...formValues, [key]: value };
          }
      }
    }
    console.log('using ai...', formValues);
    const { data, error } = await actions.movie.suggestion(formValues);
    if (error) alert(error.message);
    console.log('matches found, making sure they aren\'t hallucinations...', data);
    if (data?.hasResults) {
      const { data: movies, error: err } = await actions.movie.find(data.movies);
      console.log('movie results verified, selecting movie...', movies);
      if (movies && movies.length > 0) {
        const {data: result, error: er } = await actions.movie.select(movies);
        console.log('movie selected, updating UI...', result);
      } else {
        console.log('no movies found');
      }
    }
  });
</script>
<script>
  const form = document.forms.namedItem("movie-search-details") as HTMLFormElement | null;
  const textarea = form?.elements.namedItem("prompt") as HTMLTextAreaElement | null;
  const submitButton = document.querySelector('#new-movie-button') as HTMLButtonElement | null;
  submitButton?.addEventListener("submit", (event) => {
    event.preventDefault();
    // document.body.setAttribute("inert", "");
    // const hiddenInput = document.createElement("input");
    // hiddenInput.type = "hidden";
    // hiddenInput.name = "seenMovies";
    // hiddenInput.value = JSON.stringify(
    //   JSON.parse(sessionStorage.getItem("seenMovies") || "[]"),
    // );
    // form?.appendChild(hiddenInput);
    // form?.submit();
    // submitButton.disabled = true;
    // TODO: if form submit fails, remove inert
  });
</script>
<style>
  .break:after {
    margin: 0 0 0 1rem;
    content: "|";
    display: inline-block;
  }

  .genre-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    gap: .5rem;
    flex-wrap: wrap;
    max-height: 60vh;
    overflow-x: auto;
    accent-color: gold;

    li {
      flex: 0 1 240px;
    }

    label {
      cursor: pointer;
      display: inline-block;
      padding: .25rem 1rem .25rem .25rem;
      color: white;
      display: flex;
      align-items: center;
      gap: .5rem;
    }
  }

  form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin: 1rem 0 10rem;
  }

  .control-dock-container {
    position: fixed;
    bottom: 0.5rem;
    width: calc(100% - 1rem);
    left: .5rem;
  }

  .control-dock {
    display: flex;
    gap: 1rem;
    width: 100%;
    max-width: 800px;
    margin: auto;
    background: black;
    border-radius: 2rem;
    padding: 1rem;
    box-sizing: border-box;
    overflow-x: scroll;
    scroll-snap-type: x mandatory;
    overscroll-behavior-x: contain;
    box-shadow: 0 0 24px -6px black;
  }

  .control-dock::after {
    content: "";
    width: 100%;
    box-shadow: inset 0px 0px 10px 10px black;
    position: absolute;
    height: 100%;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    border-radius: 2rem;
    max-width: 800px;
    margin: auto;
    pointer-events: none;
  }

  textarea {
    appearance: none;
    border: none;
    padding: 1rem 1.5rem;
    border-radius: 1rem;
    background-color: white;
    color: black;
    border: 2px solid black;
    font-size: 1rem;
    resize: none;
    height: 100%;
    width: 100%;
  }

  textarea:focus-visible {
    outline: gold solid 4px;
    outline-offset: 2px;
  }

  input[type="checkbox"] {
    appearance: none;
    margin: 0;
    width: 1.25rem;
    height: 1.25rem;
    background-color: white;
    border-radius: .25rem;
    display: grid;
    place-content: center;
    cursor: pointer;
  }

  input[type="checkbox"]:checked {
    background: url(/checkmark.svg);
    background-size: 1rem 1.25rem;
    background-repeat: no-repeat;
    background-position: center;
    background-color: gold;
    box-shadow: 0 0 6px -2px gold;
    animation: glow-checkmark 2s ease infinite alternate;
  }

  label:has(input[type="checkbox"]) {
    border-radius: 8px;
  }

  input[type="checkbox"]:focus-visible {
    outline: none;
  }

  label:has(input[type="checkbox"]:focus-visible) {
    outline: 2px solid gold;
    outline-offset: -2px;
    overflow-x: visible;
  }

  label:has(input[type="checkbox"]):hover {
    background-color: rgba(255, 255, 255, 0.1);
  }
</style>
