---
interface Props {
	selector?: string;
}

const { selector = "html" } = Astro.props;
---
<scroll-position selector={selector}></scroll-position>
<script>

class ScrollPositionElement extends HTMLElement {
  abortController = new AbortController();
  timeout: number | null = null;
	selector = "html";

	getScrollElement() {
		return document.querySelector(this.selector);
	}

	static get observedAttributes() {
		return ["selector"];
	}

	attributchangedCallback(name: string, oldValue: string, newValue: string) {
		if (oldValue !== newValue) {
			if (name === "selector") {
				this.selector = newValue;
			}
		}
	}

	connectedCallback() {
		const scrollElement = this.getScrollElement();
		const top = sessionStorage.getItem("scroll-position") ?? 0;
		setTimeout(() => {
			scrollElement?.scroll({ top: Number(top) });
		});
		window.addEventListener("scroll", () => {
      if (!this.timeout) {
        this.timeout = window.setTimeout(() => {
          sessionStorage.setItem(
            "scroll-position",
            `${scrollElement?.scrollTop ?? 0}`,
          );
          this.timeout = null;
        }, 300);
      }
		}, { signal: this.abortController.signal });
	}

  disconnectCallback() {
    this.abortController.abort();
  }
}
customElements.define("scroll-position", ScrollPositionElement);
</script>