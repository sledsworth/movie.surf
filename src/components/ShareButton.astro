---
import shareSVG from "../icons/share.svg?raw";
import Button from "./Button.astro";

interface Props {
	url: string;
	text?: string;
	title?: string;
	imageUrl?: string;
	style?: string;
}

const { url, text, title, imageUrl, style } = Astro.props;
---

<share-button url={url} text={text} title={title} image-url={imageUrl}>
  <slot>
    <Button id="share-movie-button" title="Share movie" aria-label="share movie" style={style} variant="primary">
      <Fragment set:html={shareSVG} />
    </Button>
  </slot>
</share-button>
<style>
  share-button {
    display: none;
  }

  share-button:defined {
    display: block;
  }
</style>
<script>
class ShareButtonElement extends HTMLElement {
	private button?: HTMLButtonElement | null = null;
	private slotElement: HTMLSlotElement | null = null;
	private shareData: ShareData | null = null;

	static get observedAttributes() {
		return ["title", "text", "url", "image-url"];
	}

	constructor() {
		super();

		this.handleClick = this.handleClick.bind(this);
		this.handleSlotChange = this.handleSlotChange.bind(this);
		this.attachShadow({ mode: "open" });

		this.style.display = "none";
	}

	handleClick() {
		if (this.shareData) {
			navigator.share(this.shareData);
		}
	}

	async urlToFiles(url?: string | null): Promise<File[]> {
		if (!url) {
			return Promise.resolve([]);
		}
		const response = await fetch(url);
    const blob = await response.blob();
    return [new File([blob], url)];
	}

	handleSlotChange() {
		this.button = this.slotElement?.assignedElements()[0] as HTMLButtonElement;
    if (!this.button) {
      return;
    }
		this.button.addEventListener("click", this.handleClick);

		if (this.sharingSupported()) {
			this.style.display = "block";
		} else {
			this.style.display = "none";
		}
	}

	sharingSupported() {
		if (this.shareData !== null && navigator.canShare?.(this.shareData)) {
			return true;
		}
		return false;
	}

	async connectedCallback() {
		this.slotElement = document.createElement("slot");
		this.shadowRoot?.appendChild(this.slotElement);
		this.slotElement.addEventListener("slotchange", this.handleSlotChange);

		const imageUrl = this.getAttribute("image-url");
		this.shareData = {
			title: this.getAttribute("title") ?? undefined,
			text: this.getAttribute("text") ?? undefined,
			url: this.getAttribute("url") ?? undefined,
			files: await this.urlToFiles(imageUrl),
		};

		if (this.sharingSupported()) {
			this.style.display = "contents";
		}
	}

  disconnectedCallback() {
    this.button?.removeEventListener("click", this.handleClick);
  }

	attributeChangedCallback(name: string, _oldValue: string, newValue: string) {
		if (name === "image-url") {
			this.urlToFiles(newValue).then((files) => {
				this.shareData = {
					...(this.shareData ?? {}),
					files,
				};
			});
		} else {
			this.shareData = {
				...(this.shareData ?? {}),
				[name]: newValue,
			};
		}
	}
}

customElements.define("share-button", ShareButtonElement);
</script>
