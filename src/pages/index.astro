---
import { getMainMovieStreamProviders } from "@data/tmdb";
import {
	getAllGenres,
	getMovieSuggestions,
	getMovieDetails,
	getAllMovieProviders,
} from "@data/tmdb";
import Layout from "src/layouts/Layout.astro";

export const prerender = false;

interface MovieForm {
	genres: number[];
	good: boolean;
	decade?: number;
	page: number;
	providers?: number[];
}

const formData: MovieForm = {
	genres: [],
	good: true,
	decade: undefined,
	page: 1,
	providers: [],
};
if (Astro.request.method === "POST") {
	try {
		const data = await Astro.request.formData();
		formData.good = data.get("good") === "on";
		formData.genres = (data.getAll("genres") as unknown as number[]) || [];
		formData.decade = Number.parseInt(
			data.get("decade")?.toString() || "2000",
			10,
		);
	} catch (error) {
		if (error instanceof Error) {
			console.error(error.message);
		}
	}
}
const movieGenres = await getAllGenres({ type: "movie" });
const decades = [1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020];
const providers = await getAllMovieProviders();
const { movies, totalResults, totalPages } =
	await getMovieSuggestions(formData);
let randomMovie: unknown = null;
let randomMovieWatchProviders: unknown = null;
let randomMovieDetails: unknown = null;
if (totalResults > 0) {
	const randomPage = Math.ceil(Math.random() * totalPages);
	const randomMovies = await getMovieSuggestions({
		...formData,
		page: randomPage,
	});
	randomMovie =
		randomMovies.movies[Math.floor(Math.random() * randomMovies.movies.length)];
	randomMovieDetails = await getMovieDetails(randomMovie.id);
	randomMovieWatchProviders = await getMainMovieStreamProviders(randomMovie.id);
}
---
<Layout title="Movie Surf">
  <link slot="head" rel="stylesheet" href="https://use.typekit.net/upw6hrb.css">
  <header slot="header">
    <div class="light-bar">
      <div class="light"></div>
      <div class="light alternate"></div>
      <div class="light"></div>
      <div class="light alternate"></div>
      <div class="light"></div>
      <div class="light alternate"></div>
      <div class="light"></div>
      <div class="light alternate"></div>
      <div class="light"></div>
      <div class="light alternate"></div>
    </div>
    <div class="marquee">
      <h1>Movie Surf</h1>
    </div>
    <div class="light-bar">
      <div class="light"></div>
      <div class="light alternate"></div>
      <div class="light"></div>
      <div class="light alternate"></div>
      <div class="light"></div>
      <div class="light alternate"></div>
      <div class="light"></div>
      <div class="light alternate"></div>
      <div class="light"></div>
      <div class="light alternate"></div>
    </div>
  </header>
  <form name="movie-search-details" method="POST">
    <button>Movie Now!</button>
    {randomMovie && (<article class="movie-card">
      <img class="movie-card-image" width="300" src={`https://image.tmdb.org/t/p/w500${randomMovie.poster_path}`} alt={randomMovie.title} />
      <section class="movie-card-details">
        <section class="movie-card-details-meta">
          <span>{randomMovieDetails.release_date}</span>
          <span class="break">{randomMovieDetails.runtime} minutes</span>
          <section class="movie-card-details-meta-genres">
          {randomMovieDetails.genres.map(genre => (<span>{genre.name}</span>))}
          </section>
        </section>
        <h2>{randomMovieDetails.title}</h2>
      <section>
        <div style="display: flex; gap: .5rem;">
          {randomMovieWatchProviders && randomMovieWatchProviders.map((provider: { provide_name: string; logo_path: string; }) => (
            <img width="36" src={`https://image.tmdb.org/t/p/w500${provider.logo_path}`} alt={provider.provider_name} title={provider.provider_name} />
          ))}
        </div>
      </section>
      <p>{randomMovieDetails.tagline}</p>
      <p>{randomMovie.overview}</p>
      </section>
    </article>)}
  <fieldset>
  <legend>Genres</legend>
  <ul class="genre-list">
    {movieGenres.map(
      (genre: { id: number; name: string; }) => (
      <li><label>
        <input name="genres" type="checkbox" value={genre.id} checked={formData.genres.includes(genre.id.toString())}>
        {genre.name}
      </label></li>
    ))}
  </ul>
  </fieldset>
  <fieldset>
  <legend>Providers</legend>
  <ul class="genre-list">
    {providers?.map(
      (provider: { id: number; name: string; logo: string; url: string }) => (
      <li><label>
        <input name="genres" type="checkbox" value={provider.id} checked={formData.providers.includes(provider.id.toString())}>
        <img width="24" src={`https://image.tmdb.org/t/p/w500${provider.logo}`} alt={provider.name} title={provider.name} />
        {provider.name}
      </label></li>
    ))}
  </ul>
  </fieldset>
  <fieldset>
  <legend>Good?</legend>
    <label><input name="good" type="checkbox" checked={formData.good}>Good?</label>
  </fieldset>
  <fieldset>
  <legend>Decade</legend>
  <label>
    <input name="decade" type="radio" value="0" checked={formData.decade === 0}>
    All
  </label>
  {decades.map(decade => (<label>
    <input name="decade" type="radio" value={decade} checked={formData.decade === decade}>
    {decade}'s
  </label>))}
  </fieldset>
  </form>
  <p>Total pages: {totalPages}</p>
  <p>Total results: {totalResults}</p>
</Layout>
<script src="../components/browser-store.ts"></script>