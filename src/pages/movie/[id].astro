---
import type { Provider } from "@data/tmdb";
import {
	getAllGenres,
	getAllMovieProviders,
	getMovieDetails,
	getRandomMovie,
	type Movie,
} from "@data/tmdb";
import Layout from "src/layouts/Layout.astro";

export const prerender = false;
const id = Astro.params.id;

interface MovieForm {
	genres: number[];
	good: boolean;
	decade?: number;
	page: number;
	providers?: number[];
}

const formData: MovieForm = {
	genres: [],
	good: true,
	decade: undefined,
	page: 1,
	providers: [],
};

let randomMovie: Movie | null = null;
let noMoviesFound = false;
if (Astro.request.method === "POST") {
	try {
		const data = await Astro.request.formData();
		formData.good = data.get("good") === "on";
		formData.genres = (data.getAll("genres") as unknown as number[]) || [];
		formData.decade = Number.parseInt(
			data.get("decade")?.toString() || "2000",
			10,
		);
		formData.providers =
			(data.getAll("providers") as unknown as number[]) || [];

		randomMovie = await getRandomMovie(formData);
		if (randomMovie !== null) {
			return Astro.redirect(`/movie/${randomMovie.id}`);
		}

		noMoviesFound = true;
	} catch (error) {
		if (error instanceof Error) {
			console.error(error.message);
		}
	}
}

if (id) {
	randomMovie = await getMovieDetails(id);
}

const movieGenres = await getAllGenres({ type: "movie" });
const decades = [1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020];
const providers = await getAllMovieProviders();

const shareTitle = randomMovie
	? `üçø Movie night!\n\n Let's watch "${randomMovie?.title}"`
	: "Movie Surf";
// const shareDescription = "üçø It's movie night!";
const shareUrl = randomMovie
	? `https://movie.surf/movie/${randomMovie?.id}`
	: "https://movie.surf";
const shareImageUrl = randomMovie
	? `https://image.tmdb.org/t/p/w500${randomMovie?.poster_path}`
	: "";
---
<slot name="head">
  <meta property="og:title" content={shareTitle} />
  <meta property="og:description" content={shareTitle}>
  <meta property="og:type" content="website">
  <meta property="og:url" content={shareUrl} />
  <meta property="og:image" content={shareImageUrl} />
</slot>
<Layout title="Movie Surf">
  <browser-store submit-on-load={Astro.request.destination.match('/')}>
    <div class="control-dock">
      {noMoviesFound && (<p>No movies found with selected options.</p>)}
      <button popovertarget="genre-popover" type="button">Genres</button>
      <button popovertarget="decade-popover" type="button">Decade</button>
      <button popovertarget="good-popover" type="button">Good?</button>
      <button popovertarget="providers-popover" type="button">Services</button>
      <button class="glow" autofocus>New Movie</button>
      <share-button url={shareUrl}>
        <button type="button" class="share glow">Share</button>
      </share-button>
    </div>
  <form name="movie-search-details" method="POST">
    <div class="popover" id="genre-popover" popover>
      <fieldset>
        <legend>Genres</legend>
        <ul class="genre-list">
          {movieGenres.map(
            (genre: { id: number; name: string; }) => (
            <li><label>
              <input name="genres" type="checkbox" value={genre.id} checked={formData.genres.includes(genre.id)} />
              {genre.name}
            </label></li>
          ))}
        </ul>
      </fieldset>
    </div>
    <div class="popover" id="decade-popover" popover>
        <fieldset>
        <legend>Decade</legend>
        <label>
          <input name="decade" type="radio" value="0" checked={formData.decade === 0} />
          All
        </label>
        {decades.map(decade => (<label>
          <input name="decade" type="radio" value={decade} checked={formData.decade === decade}>
          {decade}'s
        </label>))}
        </fieldset>
    </div>
    <div class="popover" id="good-popover" popover>
      <fieldset>
        <legend>Good?</legend>
        <label><input name="good" type="checkbox" checked={formData.good}>Good?</label>
      </fieldset>
    </div>
    <div class="popover" id="providers-popover" popover>
      <fieldset>
        <legend>Services</legend>
        <ul class="genre-list">
          {providers?.map(
            (provider: { id: number; name: string; logo: string; url: string }) => (
            <li><label>
              <input name="providers" type="checkbox" value={provider.id} checked={formData.providers?.includes(provider.id)} />
              <img width="24" src={`https://image.tmdb.org/t/p/w500${provider.logo}`} alt={provider.name} title={provider.name} />
              {provider.name}
            </label></li>
          ))}
        </ul>
        </fieldset>
    </div>
    {randomMovie !== null && (<article class="movie-card">
      <img class="movie-card-image" width="300" src={shareImageUrl} alt={randomMovie.title} />
      <section class="movie-card-details">
        <section class="movie-card-details-meta">
          <span>{randomMovie.release_date}</span>
          <span class="break">{randomMovie.runtime} minutes</span>
          <section class="movie-card-details-meta-genres">
          {randomMovie.genres.map((genre: { name: string; }) => (<span>{genre.name}</span>))}
          </section>
        </section>
        <h2>{randomMovie.title}</h2>
      <section>
        <div style="display: flex; gap: .5rem;">
          {randomMovie.providers !== undefined && randomMovie.providers.map((provider: Provider) => (
            <img width="36" src={`https://image.tmdb.org/t/p/w500${provider.logo_path}`} alt={provider.provider_name} title={provider.provider_name} />
          ))}
        </div>
      </section>
      <p>{randomMovie.tagline}</p>
      <p>{randomMovie.overview}</p>
      </section>
    </article>)}
  </form>
</browser-store>
</Layout>
<scroll-position />
<script src="../../components/browser-store.ts"></script>
<script src="../../components/share-button.ts"></script>
<script src="../../components/scroll-position.ts"></script>
<style>

  fieldset {
    border: none;
    padding: 2rem 1rem;
  }
  
  legend {
    font-size: 2rem;
    font-family: "ltc-broadway-engraved", sans-serif;
    padding: .5rem;
  }
  
  .movie-card {
    min-width: 100%;
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    justify-content: center;
  }
  
  .movie-card-details-meta {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    font-size: .85rem;
    font-weight: 600;
    font-variant: small-caps;
    margin-bottom: 1rem;
  }
  
  .movie-card-details-meta-genres {
    display: flex;
    gap: 1rem;
  }
  
  .movie-card .movie-card-image {
    aspect-ratio: 2 / 3;
    flex: 1 3 160px;
    height: intrinsic;
    width: 200px;
  }
  
  .movie-card .movie-card-details {
    flex:  3 2 300px;
    max-width: 600px;
  }
  
  .movie-card h2 {
    font-size: 3rem;
    margin: 0;
    line-height: 1;
  }
  
  .break:after {
    margin: 0 0 0 1rem;
    content: "|";
    display: inline-block;
  }
  
  .genre-list {
      list-style: none;
      padding: 0;
      margin: 0;
      display: flex;
      gap: .5rem;
      flex-wrap: wrap;

      li {
        flex: 0 1 240px;
      }
    }
  
    form {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      margin: 1rem 0 10rem;
    }
  
    .control-dock {
      display: flex;
      gap: 1rem;
      justify-content: center;
      position: fixed;
      bottom: 0.5rem;
      width: 100%;
      max-width: 800px;
      margin: auto;
      background: black;
      border-radius: 2rem;
      padding: 1rem;
      box-sizing: border-box;
    }
    
    button {
      appearance: none;
      border: none;
      cursor: pointer;
      padding: 1rem 1.5rem;
      border-radius: 1rem;
      background-color: gold;
      color: black;
      font-weight: 800;
      font-size: 1rem;
      flex: 1;
    }
  
    button:hover {
      background-color: goldenrod;
    }
  
   input[type="checkbox"] {
    appearance: none;
    margin: 0;
    width: 1.25rem;
    height: 1.25rem;
    background-color: white;
    border-radius: .25rem;
    display: grid;
    place-content: center;
    cursor: pointer;
  }
  
  input[type="checkbox"]:checked {
    background: url(/checkmark.svg);
    background-size: 1rem 1.25rem;
    background-repeat: no-repeat;
    background-position: center;
    background-color: gold;
    box-shadow: 0 0 6px -2px gold;
    animation: glow-checkmark 2s ease infinite alternate;
  }
  
  input[type="checkbox"]:focus-visible {
    outline: none;
  }
  
  label:has(input[type="checkbox"]:focus-visible) {
    outline: max(2px, 0.15em) solid currentColor;
    outline-offset: max(2px, 0.15em);
  }
  
  .genre-list label {
    cursor: pointer;
    display: inline-block;
    padding: .25rem 1rem .25rem .25rem;
    /* border-radius: 2rem;
    background-color: black; */
    color: white;
    display: flex;
    align-items: center;
    gap: .5rem;
  }
  
  .popover {
    bottom: 8rem;
    top: initial;
    position: fixed;
    margin: auto;
    width: calc(100% - 2rem);
    max-width: 800px;
    box-sizing: border-box;
    background: #000;
    border-radius: 2rem;
    color: #fff;
    border: none;
  }
</style>