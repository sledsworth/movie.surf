---
import type { Provider } from "@data/tmdb";
import { getAllGenres, getRandomMovie, getAllMovieProviders } from "@data/tmdb";
import Layout from "src/layouts/Layout.astro";

export const prerender = false;

interface MovieForm {
	genres: number[];
	good: boolean;
	decade?: number;
	page: number;
	providers?: number[];
}

const formData: MovieForm = {
	genres: [],
	good: true,
	decade: undefined,
	page: 1,
	providers: [],
};
if (Astro.request.method === "POST") {
	try {
		const data = await Astro.request.formData();
		formData.good = data.get("good") === "on";
		formData.genres = (data.getAll("genres") as unknown as number[]) || [];
		formData.decade = Number.parseInt(
			data.get("decade")?.toString() || "2000",
			10,
		);
	} catch (error) {
		if (error instanceof Error) {
			console.error(error.message);
		}
	}
}
const movieGenres = await getAllGenres({ type: "movie" });
const decades = [1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020];
const providers = await getAllMovieProviders();
const randomMovie = await getRandomMovie(formData);
---
<Layout title="Movie Surf">
  <link slot="head" rel="stylesheet" href="https://use.typekit.net/upw6hrb.css">
  <svg overflow="visible" xmlns="http://www.w3.org/2000/svg" width="100pt" height="100pt" version="1.1" viewBox="0 0 100 100">
    <defs>
      <linearGradient id="Gradient1">
        <stop offset="5%" stop-color="white" />
        <stop offset="95%" stop-color="blue" />
      </linearGradient>
      <linearGradient id="Gradient2" x1="0" x2="0" y1="0" y2="1">
        <stop offset="5%" stop-color="red" />
        <stop offset="95%" stop-color="orange" />
      </linearGradient>
      <filter
      id="MyFilter"
      filterUnits="userSpaceOnUse"
      x="-100%" y="-100%" width="400%" height="400%">
      <!-- offsetBlur -->
      <feGaussianBlur in="SourceGraphic" stdDeviation="1" result="blur" />
      <feGaussianBlur in="blur" stdDeviation="1" result="blur">
        <animate
          attributeName="stdDeviation"
          values="1;12;1"
          dur="2s"
          repeatCount="indefinite"
        />
      </feGaussianBlur>
      <feGaussianBlur in="blur" stdDeviation="1" result="blur">
        <animate
          attributeName="stdDeviation"
          values="1;40;1"
          dur="2s"
          repeatCount="indefinite"
        />
      </feGaussianBlur>
      <feGaussianBlur in="blur" stdDeviation="8" result="blur2" />
      <feOffset in="blur2" dx="0" dy="0" result="offsetBlur" />

      <!-- litPaint -->
      <feSpecularLighting
        in="blur2"
        surfaceScale="5"
        specularConstant=".75"
        specularExponent="20"
        lighting-color="gold"
        result="specOut">
        <fePointLight x="-5000" y="-10000" z="20000" />
      </feSpecularLighting>
      <feComposite
        in="specOut"
        in2="SourceAlpha"
        operator="in"
        result="specOut" />
      <feComposite
        in="SourceGraphic"
        in2="specOut"
        operator="arithmetic"
        k1="0"
        k2="1"
        k3="1"
        k4="0"
        result="litPaint" />

      <!-- merge offsetBlur + litPaint -->
      <feMerge>
        <feMergeNode in="offsetBlur" />
        <feMergeNode in="litPaint" />
      </feMerge>
    </filter>
    </defs>
    <circle fill="gold" overflow="visible" cx="50" cy="50" r="50" filter="url(#MyFilter)" />
  </svg>
  <svg width="100%" height="32" overflow="visible">
    <defs>
            <filter
      id="light-blink"
      filterUnits="userSpaceOnUse"
      x="-100%" y="-100%" width="400%" height="400%">
      <!-- offsetBlur -->
      <feGaussianBlur in="SourceGraphic" stdDeviation="1" result="blur" />
      <feGaussianBlur in="blur" stdDeviation="1" result="blur">
        <animate
          attributeName="stdDeviation"
          values="1;12;1"
          dur="2s"
          repeatCount="indefinite"
        />
      </feGaussianBlur>
      <feGaussianBlur in="blur" stdDeviation="1" result="blur">
        <animate
          attributeName="stdDeviation"
          values="1;40;1"
          dur="2s"
          repeatCount="indefinite"
        />
      </feGaussianBlur>
      <feGaussianBlur in="blur" stdDeviation="8" result="blur2" />
      <feOffset in="blur2" dx="0" dy="0" result="offsetBlur" />

      <!-- litPaint -->
      <feSpecularLighting
        in="blur2"
        surfaceScale="5"
        specularConstant=".75"
        specularExponent="20"
        lighting-color="gold"
        result="specOut">
        <fePointLight x="-5000" y="-10000" z="20000" />
      </feSpecularLighting>
      <feComposite
        in="specOut"
        in2="SourceAlpha"
        operator="in"
        result="specOut" />
      <feComposite
        in="SourceGraphic"
        in2="specOut"
        operator="arithmetic"
        k1="0"
        k2="1"
        k3="1"
        k4="0"
        result="litPaint" />

      <!-- merge offsetBlur + litPaint -->
      <feMerge>
        <feMergeNode in="offsetBlur" />
        <feMergeNode in="litPaint" />
      </feMerge>
    </filter>
      <pattern id="lights" height="1" width=".1">
        <circle fill="gold" overflow="visible" cx="16" cy="16" r="12" filter="url(#light-blink)" />
      </pattern>
    </defs>
    <circle fill="gold" overflow="visible" cx="16" cy="16" r="12" filter="url(#light-blink)" />
    <circle fill="gold" overflow="visible" cx="48" cy="16" r="12" filter="url(#light-blink)" />
    <circle fill="gold" overflow="visible" cx="80" cy="16" r="12" filter="url(#light-blink)" />
    <circle fill="gold" overflow="visible" cx="112" cy="16" r="12" filter="url(#light-blink)" />
    <circle fill="gold" overflow="visible" cx="144" cy="16" r="12" filter="url(#light-blink)" />
    <circle fill="gold" overflow="visible" cx="176" cy="16" r="12" filter="url(#light-blink)" />
    <circle fill="gold" overflow="visible" cx="208" cy="16" r="12" filter="url(#light-blink)" />
  </svg>
  <header slot="header">
    <div class="light-bar">
      <div class="light"></div>
      <div class="light alternate"></div>
      <div class="light"></div>
      <div class="light alternate"></div>
      <div class="light"></div>
      <div class="light alternate"></div>
      <div class="light"></div>
      <div class="light alternate"></div>
      <div class="light"></div>
      <div class="light alternate"></div>
    </div>
    <div class="marquee">
      <h1>Movie Surf</h1>
    </div>
    <div class="light-bar">
      <div class="light"></div>
      <div class="light alternate"></div>
      <div class="light"></div>
      <div class="light alternate"></div>
      <div class="light"></div>
      <div class="light alternate"></div>
      <div class="light"></div>
      <div class="light alternate"></div>
      <div class="light"></div>
      <div class="light alternate"></div>
    </div>
  </header>
  <form name="movie-search-details" method="POST">
    <button>Movie Now!</button>
    {randomMovie !== null && (<article class="movie-card">
      <img class="movie-card-image" width="300" src={`https://image.tmdb.org/t/p/w500${randomMovie.poster_path}`} alt={randomMovie.title} />
      <section class="movie-card-details">
        <section class="movie-card-details-meta">
          <span>{randomMovie.release_date}</span>
          <span class="break">{randomMovie.runtime} minutes</span>
          <section class="movie-card-details-meta-genres">
          {randomMovie.genres.map(genre => (<span>{genre.name}</span>))}
          </section>
        </section>
        <h2>{randomMovie.title}</h2>
      <section>
        <div style="display: flex; gap: .5rem;">
          {randomMovie.providers !== undefined && randomMovie.providers.map((provider: Provider) => (
            <img width="36" src={`https://image.tmdb.org/t/p/w500${provider.logo_path}`} alt={provider.provider_name} title={provider.provider_name} />
          ))}
        </div>
      </section>
      <p>{randomMovie.tagline}</p>
      <p>{randomMovie.overview}</p>
      </section>
    </article>)}
  <fieldset>
  <legend>Genres</legend>
  <ul class="genre-list">
    {movieGenres.map(
      (genre: { id: number; name: string; }) => (
      <li><label>
        <input name="genres" type="checkbox" value={genre.id} checked={formData.genres.includes(genre.id)}>
        {genre.name}
      </label></li>
    ))}
  </ul>
  </fieldset>
  <fieldset>
  <legend>Providers</legend>
  <ul class="genre-list">
    {providers?.map(
      (provider: { id: number; name: string; logo: string; url: string }) => (
      <li><label>
        <input name="genres" type="checkbox" value={provider.id} checked={formData.providers?.includes(provider.id)}>
        <img width="24" src={`https://image.tmdb.org/t/p/w500${provider.logo}`} alt={provider.name} title={provider.name} />
        {provider.name}
      </label></li>
    ))}
  </ul>
  </fieldset>
  <fieldset>
  <legend>Good?</legend>
    <label><input name="good" type="checkbox" checked={formData.good}>Good?</label>
  </fieldset>
  <fieldset>
  <legend>Decade</legend>
  <label>
    <input name="decade" type="radio" value="0" checked={formData.decade === 0}>
    All
  </label>
  {decades.map(decade => (<label>
    <input name="decade" type="radio" value={decade} checked={formData.decade === decade}>
    {decade}'s
  </label>))}
  </fieldset>
  </form>
</Layout>
<script src="../components/browser-store.ts"></script>