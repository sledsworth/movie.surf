---
import { getMainMovieStreamProviders } from "@data/tmdb";
import {
	getAllGenres,
	getMovieSuggestions,
	getMovieDetails,
	getAllMovieProviders,
} from "@data/tmdb";
import Layout from "src/layouts/Layout.astro";

export const prerender = false;

interface MovieForm {
	genres: number[];
	good: boolean;
	decade?: number;
	page: number;
	providers?: number[];
}

const formData: MovieForm = {
	genres: [],
	good: true,
	decade: undefined,
	page: 1,
	providers: [],
};
if (Astro.request.method === "POST") {
	try {
		const data = await Astro.request.formData();
		formData.good = data.get("good") === "on";
		formData.genres = (data.getAll("genres") as unknown as number[]) || [];
		formData.decade = Number.parseInt(
			data.get("decade")?.toString() || "2000",
			10,
		);
	} catch (error) {
		if (error instanceof Error) {
			console.error(error.message);
		}
	}
}
const movieGenres = await getAllGenres({ type: "movie" });
const decades = [1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020];
const providers = await getAllMovieProviders();
const { movies, totalResults, totalPages } =
	await getMovieSuggestions(formData);
let randomMovie: unknown = null;
let randomMovieWatchProviders: unknown = null;
let randomMovieDetails: unknown = null;
console.log(totalResults);
if (totalResults > 0) {
	const randomPage = Math.ceil(Math.random() * totalPages);
	const randomMovies = await getMovieSuggestions({
		...formData,
		page: randomPage,
	});
	// console.log(movies, randomMovies);
	randomMovie =
		randomMovies.movies[Math.floor(Math.random() * randomMovies.movies.length)];
	randomMovieDetails = await getMovieDetails(randomMovie.id);
	randomMovieWatchProviders = await getMainMovieStreamProviders(randomMovie.id);
	// console.log(randomMovieDetails, randomMovieWatchProviders, providers)
}
---
<svg overflow="visible" xmlns="http://www.w3.org/2000/svg" width="100%" height="48" viewBox="0 0 100% 48">
  <defs>
    <filter id="filter0_di_1056_16" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
      <feFlood flood-opacity="0" result="BackgroundImageFix"/>
      <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
      <feMorphology radius="8" operator="dilate" in="SourceAlpha" result="effect1_dropShadow_1056_16"/>
      <feOffset/>
      <feGaussianBlur stdDeviation="2"/>
      <feComposite in2="hardAlpha" operator="out"/>
      <feColorMatrix type="matrix" values="0 0 0 0 1 0 0 0 0 0.898039 0 0 0 0 0 0 0 0 0.25 0"/>
      <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_1056_16"/>
      <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_1056_16" result="shape"/>
      <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
      <feMorphology radius="5" operator="erode" in="SourceAlpha" result="effect2_innerShadow_1056_16"/>
      <feOffset/>
      <feGaussianBlur stdDeviation="2.5"/>
      <feComposite in2="hardAlpha" operator="arithmetic" k2="-1" k3="1"/>
      <feColorMatrix type="matrix" values="0 0 0 0 1 0 0 0 0 0.898039 0 0 0 0 0 0 0 0 1 0"/>
      <feBlend mode="normal" in2="shape" result="effect2_innerShadow_1056_16"/>
      </filter>
    <pattern overflow="visible" id="light-off" patternUnits="userSpaceOnUse" width="96" height="48">
      <circle overflow="visible" filter="url(#filter0_di_1056_16)" cx="18" cy="18" r="12" stroke="white" stroke-width="1" fill="none">
        <animate
          attributeName="stroke-width"
          values="1;2;1"
          dur="2s"
          repeatCount="indefinite"
        />
        <animate
          attributeName="stroke"
          values="white;gold;white"
          dur="2s"
          keyTimes="0;0.25;1"
          repeatCount="indefinite"
        />
      </circle>
      <circle overflow="visible" cx="66" cy="18" r="12" stroke="white" stroke-width="1" fill="none">
        <animate
          attributeName="stroke-width"
          values="1;10;1"
          dur="3s"
          repeatCount="indefinite"
        />
        <animate
          attributeName="stroke"
          values="white;green;white"
          dur="2s"
          keyTimes="0;0.25;1"
          repeatCount="indefinite"
        />
      </circle>
    </pattern>
    <pattern overflow="visible" id="light-on" patternUnits="userSpaceOnUse" width="130" height="24">
      <g overflow="visible" filter="url(#filter0_di_1056_16)">
        <circle overflow="visible" cx="12" cy="12" r="10" fill="white" fill-opacity="0.9" shape-rendering="crispEdges">
          <animate
            attributeName="fill-opacity"
            values="0.9;0.5;0.9"
            dur="2s"
            repeatCount="indefinite"
          />
        </circle>
        <circle overflow="visible" cx="12" cy="12" r="10" stroke="#F9F9FC" stroke-width="0.5" shape-rendering="crispEdges">
          <animate
            attributeName="stroke-width"
            values="0.5;1;0.5"
            dur="2s"
            repeatCount="indefinite"
          />
        </circle>
      </g>
    </pattern>
  </defs>
  <circle overflow="visible" cx="18" cy="18" r="12" stroke="white" stroke-width="1" fill="none" filter="url(#spotlight)">
    <animate
      attributeName="stroke-width"
      values="1;2;1"
      dur="2s"
      repeatCount="indefinite"
    />
    <animate
      attributeName="stroke"
      values="white;gold;white"
      dur="2s"
      keyTimes="0;0.25;1"
      repeatCount="indefinite"
    />
  </circle>
  <defs>
    <filter overflow="visible" filterUnits="userSpaceOnUse" id="spotlight">
      <feSpecularLighting
        result="spotlight"
        specularConstant="1.2"
        specularExponent="100"
        lighting-color="white">
        <fePointLight x="18" y="18" z="100">
          <animate
            attributeName="z"
            values="50;100;50"
            dur="2s"
            repeatCount="indefinite"
          />
        </fePointLight>
      </feSpecularLighting>
      <feComposite
        in="SourceGraphic"
        in2="spotlight"
        operator="arithmetic"
        k1="0"
        k2="1"
        k3="1"
        k4="0" />
    </filter>
    <filter overflow="visible" id="animatedShadow" filterUnits="userSpaceOnUse">
      <feDropShadow overflow="visible" dx="0" dy="0" stdDeviation="0" flood-color="gold">
        <animate
          attributeName="stdDeviation"
          values="0;20;0"
          dur="2s"
          repeatCount="indefinite"
        />
      </feDropShadow>
    </filter>
  </defs>
</svg>
<Layout title="Movie Surf">
  <link slot="head" rel="stylesheet" href="https://use.typekit.net/upw6hrb.css">

  <canvas id="canvas"></canvas>
  <script>
    const canvas = document.getElementById("canvas") as HTMLCanvasElement;
    const ctx = canvas.getContext("2d");
    if (ctx) {
      ctx.fillStyle = "white";
      ctx.arc(10, 10, 10, 0, Math.PI * 2);
    }
  </script>
  <header slot="header">
    <div class="light-bar">
      <div class="light"></div>
      <div class="light alternate"></div>
      <div class="light"></div>
      <div class="light alternate"></div>
      <div class="light"></div>
      <div class="light alternate"></div>
      <div class="light"></div>
      <div class="light alternate"></div>
    </div>
    <div class="marquee">
      <h1>Movie Surf</h1>
    </div>
  </header>
  <form name="movie-search-details" method="POST">
  <fieldset>
  <legend>Genres</legend>
  <ul class="genre-list">
    {movieGenres.map(
      (genre: { id: number; name: string; }) => (
      <li><label>
        <input name="genres" type="checkbox" value={genre.id} checked={formData.genres.includes(genre.id.toString())}>
        {genre.name}
      </label></li>
    ))}
  </ul>
  </fieldset>
  <fieldset>
  <legend>Providers</legend>
  <ul class="genre-list">
    {providers?.map(
      (provider: { id: number; name: string; logo: string; url: string }) => (
      <li><label>
        <input name="genres" type="checkbox" value={provider.id} checked={formData.providers.includes(provider.id.toString())}>
        <img width="24" src={`https://image.tmdb.org/t/p/w500${provider.logo}`} alt={provider.name} title={provider.name} />
        {provider.name}
      </label></li>
    ))}
  </ul>
  </fieldset>
  <fieldset>
  <legend>Good?</legend>
    <label><input name="good" type="checkbox" checked={formData.good}>Good?</label>
  </fieldset>
  <fieldset>
  <legend>Decade</legend>
  <label>
    <input name="decade" type="radio" value="0" checked={formData.decade === 0}>
    All
  </label>
  {decades.map(decade => (<label>
    <input name="decade" type="radio" value={decade} checked={formData.decade === decade}>
    {decade}'s
  </label>))}
  </fieldset>
  <button>Movie Now!</button>
  </form>
  {randomMovie && (<section>
    <img width="500" src={`https://image.tmdb.org/t/p/w500${randomMovie.poster_path}`} alt={randomMovie.title} />
    <h3>{randomMovie.title}</h3>
    {randomMovieDetails.genres.map(genre => (<span>{genre.name}</span>))}
    <section>
      <span>Streaming</span>
      <div style="display: flex; gap: .5rem;">
        {randomMovieWatchProviders && randomMovieWatchProviders.map((provider: { provide_name: string; logo_path: string; }) => (
          <img width="48" src={`https://image.tmdb.org/t/p/w500${provider.logo_path}`} alt={provider.provider_name} title={provider.provider_name} />
        ))}
      </div>
    </section>
    <p>{randomMovie.overview}</p>
    <a href={randomMovieWatchProviders?.link}>Watch Now</a>
  </section>)}
  <p>Total pages: {totalPages}</p>
  <p>Total results: {totalResults}</p>
</Layout>
<script src="../components/browser-store.ts"></script>